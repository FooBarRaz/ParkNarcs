import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';
import NarcService from "./submission/narc.service";
import {RootState} from "../../app/store";
import {NarcReport, NarcRequest} from "./types";

export interface NarcState {
    reports: Array<NarcReport>;
}

const initialState: NarcState = {
    reports: []
};

export const narcABitchOut = createAsyncThunk('narcs/narcABitchOut', async (payload: NarcRequest, thunkAPI) => {
    const userId = (thunkAPI.getState() as RootState).user.userId;
    return userId ?
        NarcService.narc({
            ...payload,
            date: new Date().toISOString(),
            postedBy: userId
        })
        : Promise.reject('Not signed in');
})

export const fetchReports = createAsyncThunk('narcs/fetchReports', async () => NarcService.fetchReports())

export const narcSlice = createSlice({
    name: 'narcs',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) =>
        builder.addCase(fetchReports.fulfilled, (state, action) => {
            state.reports = action.payload as any;
        })
});



// export const selectCount = (state: RootState) => state.counter.value;

export default narcSlice.reducer;
